FORMAT: 1A
HOST: http://localhost/v1/

# babe-user-ms

This document outlines the design and architecture of the new user service.  The user service is a component in BaBe service oriented architecture stack.  It encapsulates and provides a suite of service endpoints to allow other components or services to query and update BaBe user data.  
 
# Group Login & Authentication

## Device Login [/user/login/android{?advId,deviceId}]

+ Parameters
    + advId (string) - Google Advertising ID.
    + deviceId (string) - Android device ID

### Android User Login [POST]

Add new user (with no userId known before) into database. If the advId (advertising ID) match to one of the `:AndroidUser` in the database, then return the uid (userID) of the `:CommonUser` connected to the matched `:AndroidUser` otherwise create new `:CommonUser`, generate new uid, add new node `:AndroidUser` filled with Data Params then return newly created uid.

+ Response 200 (application/json)
    + Attributes (DeviceLoginResponse)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### IOS User Login [POST /user/login/ios{?idfa,deviceId}]

Add new user (with no userId known before) into database. If the idfa(Identifier for Advertiser) match to one of the `:IosUser` in the database, then return the uid (userID) of the `:CommonUser` connected to the matched `:IosUser` otherwise create new `:CommonUser`, generate new uid, add new node `:IosUser` filled with Data Params then return newly created uid.

+ Parameters
    + idfa (string) - Identifier for Advertiser.
    + deviceId (string) - IOS device ID

+ Response 200 (application/json)
    + Attributes (DeviceLoginResponse)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
            
### Web User Login [POST /user/login/web{?gcmId,deviceId}]

Add new user (with no userId known before) into database. If the gcmId (Google Cloud Messaging ID) match to one of the `:WebUser` in the database, then return the uid (userID) of the `:CommonUser` connected to the matched `:WebUser` otherwise create new `:CommonUser`, generate new uid, add new node `:WebUser` filled with Data Params then return newly created uid.

+ Parameters
    + gcmId (string) - Google Cloud Messaging ID.
    + deviceId (string) - Web device ID

+ Response 200 (application/json)
    + Attributes (DeviceLoginResponse)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
            
## Social Media Login [/user/auth/fb{?uid,name,babeToken,date,fbId,fbToken,advId,gcmId,idfa,apnsToken,fbEmail,userAvatar}]

### FB Login [POST]

Authenticate a user with client generated token key (shared secret) and user FB credentials to the DB. First generate the token using shared secret by : 
```
md5(strrev(sharedSecret + userId) + fbEmail + date)
```
Match the babeToken in HTTP param, if unmatch then return HTTP 401.
First find `:CommonUser` or `:FBUser` in DB by querying using these precedence: 
```
fbEmail > fbId > uid > advId > idfa > gcmId
```
If the user is found, then update:
+ *:CommonUser.name*
+ *:CommonUser.token*
+ *:CommonUser.userAvatar (opt)*
+ *:CommonUser.updated*
+ *:AUTH_BY.lastLogin*
+ *:FBUser.email (opt)*
+ *:FBUser.fbId*
+ *:FBUser.fbToken*

If the user is not found then create new `:CommonUser` with relationship to new `:FBUser` and also relationship to either `:AndroidUser`, `:IOSUser` or `:WebUser` based on the HTTP param which is present (advId, idfa, gcmId).
Either way, put these key-value into redis *(Cache per dimension)*:

| Redis Key                            | TTL    | Desc                                         |
|--------------------------------------|--------|----------------------------------------------|
| `x-token:{token}`                    | 30 day | Alias to user id                             |
| `x-dimens-basic-id:{uid}`            | 30 day | JSON Formatted Basic User Object             |
| `x-dimens-full-id:{uid}`             | 30 day | JSON Formatted Full User Object              |
| `x-dimens-ios-id:{uid}`              | 30 day | JSON Formatted iOS User Object               |
| `x-dimens-droid-id:{uid}`            | 30 day | JSON Formatted Android User Object           |
| `x-dimens-web-id:{uid}`              | 30 day | JSON Formatted Web User Object               |
| `x-dimens-fb-id:{uid}`               | 30 day | JSON Formatted FB User Object                |
| `x-dimens-gp-id:{uid}`               | 30 day | JSON Formatted Google User Object            |
| `x-dimens-basicdemographic-id:{uid}` | 30 day | JSON Formatted User Basic Demographic Object |
| `x-dimens-location-id:{uid}`         | 30 day | JSON Formatted User Location Object          |
| `x-dimens-interests-id:{uid}`        | 30 day | JSON Formatted User's Interest Object        |
| `x-dimens-occupation-id:{uid}`       | 30 day | JSON Formatted User's Occupation Object      |
| `x-dimens-education-id:{uid}`        | 30 day | JSON Formatted User's Education Object       |

Also put pair of uid & fbToken into MQ queue : `fb_demographic`.
Return the predefined user model as response.

+ Request (application/json)
    + Attributes (FBAuthRequest)

+ Response 200 (application/json)
    + Attributes (UserPredefinedModel)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 401 (application/json)
    Return when token is invalid

    + Attributes (DefaultError401)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Google Login [POST /user/auth/google]

Authenticate a user with client generated token key (shared secret) and user Google credentials to the DB. First generate the token using shared secret by :  
```
md5(strrev(sharedSecret + userId) + gEmail + date)
```
Match the babeToken in HTTP param, if unmatch then return HTTP 401.
First find `:CommonUser` or `:GoogleUser` in DB by querying using these precedence: 
```
gpEmail > gpId > uid > advId > idfa > gcmId
```
If the user is found, then update:
+ *:CommonUser.name*
+ *:CommonUser.token*
+ *:CommonUser.userAvatar (opt)*
+ *:CommonUser.updated*
+ *:AUTH_BY.lastLogin*
+ *:GoogleUser.email*
+ *:GoogleUser.gId*
+ *:GoogleUser.gToken*

If the user is not found then create new `:CommonUser` with relationship to new `:GoogleUser` and also relationship to either `:AndroidUser`, `:IOSUser` or `:WebUser` based on the HTTP param which is present (advId, idfa, gcmId).
Either way, put these key-value into redis *(Cache per dimension)*:

| Redis Key                            | TTL    | Desc                                         |
|--------------------------------------|--------|----------------------------------------------|
| `x-token:{token}`                    | 30 day | Alias to user id                             |
| `x-dimens-basic-id:{uid}`            | 30 day | JSON Formatted Basic User Object             |
| `x-dimens-full-id:{uid}`             | 30 day | JSON Formatted Full User Object              |
| `x-dimens-ios-id:{uid}`              | 30 day | JSON Formatted iOS User Object               |
| `x-dimens-droid-id:{uid}`            | 30 day | JSON Formatted Android User Object           |
| `x-dimens-web-id:{uid}`              | 30 day | JSON Formatted Web User Object               |
| `x-dimens-fb-id:{uid}`               | 30 day | JSON Formatted FB User Object                |
| `x-dimens-gp-id:{uid}`               | 30 day | JSON Formatted Google User Object            |
| `x-dimens-basicdemographic-id:{uid}` | 30 day | JSON Formatted User Basic Demographic Object |
| `x-dimens-location-id:{uid}`         | 30 day | JSON Formatted User Location Object          |
| `x-dimens-interests-id:{uid}`        | 30 day | JSON Formatted User's Interest Object        |
| `x-dimens-occupation-id:{uid}`       | 30 day | JSON Formatted User's Occupation Object      |
| `x-dimens-education-id:{uid}`        | 30 day | JSON Formatted User's Education Object       |

Return the predefined user model as response.

+ Request (application/json)
    + Attributes (GoogleAuthRequest)

+ Response 200 (application/json)
    + Attributes (UserPredefinedModel)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 401 (application/json)
    Return when token is invalid

    + Attributes (DefaultError401)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

# Group User

## User Retrieval [/user/{uid}]

### Get User Shared Model [POST]

Get the user shared model by looking from uid supplied. 
Use this precedence to look user for: 
```
redis > DB
```
If user is not found then return HTTP 404. Otherwise return the shared model. 
Optionally, other user property can be supplied to add the desired fields other than the standard shared model using dimension data param.

Refer to table below of supported user's dimension

| Dimension            | Append Type     | Properties                        |
|----------------------|-----------------|-----------------------------------|
| **basic**            | Default Object  | uid (String)                      |
|                      |                 | name (String)                     |
|                      |                 | token (String)                    |
|                      |                 | userAvatar (String)               |
|                      |                 | lastSeen (Timestamp)              |
| **full**             | Flatten         | username (String)                 |
|                      |                 | created (Timestamp)               |
|                      |                 | updated (Timestamp)               |
|                      |                 | enabled (Boolean)                 |
| **iosuser**          | Array of Object | idfa (String)                     |
|                      |                 | apnsToken (String)                |
|                      |                 | deviceId (String)                 |
| **androiduser**      | Array of Object | advId (String)                    |
|                      |                 | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **webuser**          | Array of Object | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **fbuser**           | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **googleuser**       | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **interest**         | Array of Object | name (String)                     |
|                      |                 | weight (Double)                   |
| **interestcategory** | Array of Object | name (String)                     |
|                      |                 | weight (Double)                   |
| **basicdemographic** | Flatten         | birthday (Timestamp)              |
|                      |                 | ageGroup (String) = "*min - ?max" |
|                      |                 | gender (String)                   |
|                      |                 | religion (String)                 |
|                      |                 | politic (String)                  |
| **education**        | Flatten         | school (String)                   |
|                      |                 | fieldOfStudy (String)             |
|                      |                 | schoolType (String)               |
| **occupation**       | Flatten         | employer (String)                 |
|                      |                 | position (String)                 |
|                      |                 | location (String)                 |
| **location**         | Flatten         | hometown (String)                 |
|                      |                 | country (String)                  |
|                      |                 | city (String)                     |

+ Parameters
    + uid: 123 (number) - User ID
    
+ Request (application/json)
    + Attributes
        + dimension (array[enum[string]], optional)
        
            The User's Dimension
            
            + Members
                + basic - Default, always implicitly included
                + full - Extended user's information
                + iosuser
                + androiduser
                + webuser
                + fbuser
                + googleuser
                + interest
                + interestcategory
                + basicdemographic
                + education
                + occupation
                + location

+ Response 200 (application/json)    
    + Attributes (BasicPlusUserModel)
    
+ Request Dimension is `full`
    + Attributes
        + dimension: ["full"]

+ Response 200 (application/json)
    + Attributes (ExtendedUserModel)
    
+ Request Dimension is `fbuser`
    + Attributes
        + dimension: ["fbuser"]
        
+ Response 200 (application/json)
    + Attributes (BasicPlusUserModel)
        + fbUser (SharedFBModel)

+ Request Dimension is `interest`
    + Attributes
        + dimension: ["interest"]
        
+ Response 200 (application/json)
    + Attributes (BasicPlusUserModel)
        + interest (array[UserInterestModel])

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

# Data Structures

## DeviceLoginResponse (object)
+ uid: 123 (number) - Babe User ID

## BasicUserModel (object)
+ uid: 123 (string) - Babe User ID.
+ name: Angga Muhammad (string) - Web device ID
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string) - BABE Generated Token
+ userAvatar: http://cdn.babe.news/images/123.jpg (string) - User Avatar Image URL

## BasicPlusUserModel (BasicUserModel)
+ lastSeen: 1465631405 (number) - Last seen in Babe (timestamp)

## ExtendedUserModel (BasicPlusUserModel)
+ enabled: true (boolean) - Toggle whether user is active or not
+ admin: false (boolean) - Toggle whether user has admin priviledge or not
+ banned: false (boolean) - Toggle whether user is banned or not
+ birthday: 567993600 (number) - User's birthday
+ created: 1465631405 (number) - When the user created in the system (timestamp)
+ updated: 1465631405 (number) - When the user record is updated (timestamp)

## BasicAndroidModel (object)
+ advId: 2261ae9f81b (string) - Google Advertiser ID
+ gcmId: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1 (string) - Android Google Cloud Messaging ID

## BasicIOSModel (object)
+ idfa: adwad2214bf (string) - Apple's Identification for Advertiser
+ apnsToken: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1 (string) - Apple Push Notification Service Token

## BasicFBModel (object)
+ fbId: KKD22da111da34 (string) - Facebook User ID
+ fbToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string) - Facebook Token
+ fbEmail: amura@abc.com (string) - FB Email

## SharedFBModel (object)
+ id: KKD22da111da34 (string) - Facebook User ID
+ token: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string) - Facebook Token
+ email: amura@abc.com (string) - FB Email
+ lastLogin: 1465631405 (number) - Timestamp of last login

## BasicGPlusModel (object)
+ gpId: FBA22da111da3A (string) - Google Plus User ID
+ gpToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIikiYWRtaW4iOnRydWV9 (string) - Google Plus Token
+ gpEmail: amura@gmail.com (string) - Google Plus Email

## FBAuthRequest (BasicUserModel)
+ uid: 123 (string, required) - Babe User ID.
+ name: Angga Muhammad (string, required) - Web device ID
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string, required) - BABE Generated Token
+ date: `2016-08-31 12:00:01` (string, required) - Date formatted as (YYYY-MM-dd HH:mm:ss)
+ Include BasicFBModel
+ fbId: KKD22da111da34 (string, required) - Facebook User ID
+ fbToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string, required) - Facebook Token
+ Include BasicAndroidModel
+ Include BasicIOSModel

## GoogleAuthRequest (BasicUserModel)
+ uid: 123 (string, required) - Babe User ID.
+ name: Angga Muhammad (string, required) - Web device ID
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string, required) - BABE Generated Token
+ date: `2016-08-31 12:00:01` (string, required) - Date formatted as (YYYY-MM-dd HH:mm:ss)
+ Include BasicGPlusModel
+ gpId: FBA22da111da3A (string, required) - Google Plus User ID
+ gpToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIikiYWRtaW4iOnRydWV9 (string, required) - Google Plus Token
+ gpEmail: amura@gmail.com (string, required) - Google Plus Email
+ Include BasicAndroidModel
+ Include BasicIOSModel

## UserPredefinedModel (ExtendedUserModel)
+ categories: [1, 3, 9, 21, 55] (array[number]) - User category preference 
+ Include BasicFBModel
+ Include BasicGPlusModel

## UserInterestModel (object)
+ name: Katty Perry (string) - Name of interest
+ weight: `1.0` (number) - Weight of interest

## Error (object)
+ errCode (number) - Error Code
+ errMsg (string) - Error Message

## DefaultError400 (Error)
+ errCode: `-1`
+ errMsg: Invalid Request

## DefaultError401 (Error)
+ errCode: `-2`
+ errMsg: Authorization needed to access resource

## DefaultError503 (Error)
+ errCode: `-10`
+ errMsg: Backend service is down