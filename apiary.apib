FORMAT: 1A
HOST: http://10.2.15.198:9000/user/v1/

# babe-user-ms

This document outlines the design and architecture of the new user service. 

The user service is a component in BaBe service oriented architecture stack.  

It encapsulates and provides a suite of service endpoints to allow other components or services to query and update BaBe user data.  
 
# Group Login & Authentication

## Device Login [/login/android]

### Android User Login [POST]

Add new user (with no userId known before) into database. 

If the advId (advertising ID) match to one of the `:AndroidUser` in the database, then return the uid (userID) of the `:CommonUser` connected to the matched `:AndroidUser` otherwise create new `:CommonUser`, generate new uid, add new node `:AndroidUser` filled with Data Params then return newly created uid.

+ Request (application/json)
    + Attributes
        + advId (string, required) - Google Advertising ID.
        + deviceId (string) - Android device ID.

+ Response 200 (application/json)
    + Attributes (DeviceLoginResponse)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### IOS User Login [POST /login/ios]

Add new user (with no userId known before) into database. 

If the idfa(Identifier for Advertiser) match to one of the `:IosUser` in the database, then return the uid (userID) of the `:CommonUser` connected to the matched `:IosUser` otherwise create new `:CommonUser`, generate new uid, add new node `:IosUser` filled with Data Params then return newly created uid.

+ Request (application/json)
    + Attributes
        + idfa (string) - Identifier for Advertiser.
        + deviceId (string) - IOS device ID

+ Response 200 (application/json)
    + Attributes (DeviceLoginResponse)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
            
### Web User Login [POST /login/web]

Add new user (with no userId known before) into database. 

If the gcmId (Google Cloud Messaging ID) match to one of the `:WebUser` in the database, then return the uid (userID) of the `:CommonUser` connected to the matched `:WebUser` otherwise create new `:CommonUser`, generate new uid, add new node `:WebUser` filled with Data Params then return newly created uid.

+ Request (application/json)
    + Attributes
        + gcmId (string) - Google Cloud Messaging ID.
        + deviceId (string) - Web device ID

+ Response 200 (application/json)
    + Attributes (DeviceLoginResponse)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
            
## Social Media Login [/auth/fb]

### FB Login [POST]

1. Authenticate a user with client generated token key (shared secret) and user FB credentials to the DB. First generate the token using shared secret by : 

        md5(strrev(sharedSecret + userId) + fbEmail + date)

2. Match the babeToken in HTTP param, if unmatched then return HTTP 401.

3. First find `:CommonUser` or `:FBUser` in DB by querying using these precedence: 

        fbEmail > fbId > uid > advId > idfa > gcmId

4. If the user is found, then update:
    + *:CommonUser.name*
    + *:CommonUser.token*
    + *:CommonUser.userAvatar (opt)*
    + *:CommonUser.updated*
    + *:AUTH_BY.lastLogin*
    + *:FBUser.email (opt)*
    + *:FBUser.fbId*
    + *:FBUser.fbToken*

5. If the user is not found then create new `:CommonUser` with relationship to new `:FBUser` and also relationship to either `:AndroidUser`, `:IOSUser` or `:WebUser` based on the HTTP param which is present (advId, idfa, gcmId).

6. Either way, put these key-value into redis *(Cache per dimension)* *see below:

7. Check whether the connected `AndroidUser` has any `IS_A` relationship to another `CommonUser`, If it has, then switch `IS_A` relationship to this `CommonUser`. Otherwise create `IS_A` relationship to `AndroidUser` and each `AndroidUser` can only has **1** at the same time.

8. Check whether the connected `IOSUser` has any `IS_A` relationship to another `CommonUser`, If it has, then switch `IS_A` relationship to this `CommonUser`. Otherwise create `IS_A` relationship to `IOSUser` and each `IOSUser` can only has **1** at the same time.

9. Check whether the connected `WebUser` has any `IS_A` relationship to another `CommonUser`, If it has, then switch `IS_A` relationship to this `CommonUser`. Otherwise create `IS_A` relationship to `WebUser` and each `WebUser` can only has **1** at the same time.

10. Put pair of uid & fbToken into MQ queue : `fb_demographic`.

11. Return the predefined user model as response.

#### Redis Key To Be Defined on Point 6

| Redis Key                            | TTL    | Desc                                         |
|--------------------------------------|--------|----------------------------------------------|
| `x-token:{token}`                    | 30 day | Alias to user id                             |
| `x-dimens-basic-id:{uid}`            | 30 day | JSON Formatted Basic User Object             |
| `x-dimens-full-id:{uid}`             | 30 day | JSON Formatted Full User Object              |
| `x-dimens-ios-id:{uid}`              | 30 day | JSON Formatted iOS User Object               |
| `x-dimens-droid-id:{uid}`            | 30 day | JSON Formatted Android User Object           |
| `x-dimens-web-id:{uid}`              | 30 day | JSON Formatted Web User Object               |
| `x-dimens-fb-id:{uid}`               | 30 day | JSON Formatted FB User Object                |
| `x-dimens-gp-id:{uid}`               | 30 day | JSON Formatted Google User Object            |
| `x-dimens-basicdemographic-id:{uid}` | 30 day | JSON Formatted User Basic Demographic Object |
| `x-dimens-location-id:{uid}`         | 30 day | JSON Formatted User Location Object          |
| `x-dimens-interests-id:{uid}`        | 30 day | JSON Formatted User's Interest Object        |
| `x-dimens-occupation-id:{uid}`       | 30 day | JSON Formatted User's Occupation Object      |
| `x-dimens-education-id:{uid}`        | 30 day | JSON Formatted User's Education Object       |

+ Request (application/json)
    + Attributes (FBAuthRequest)

+ Response 200 (application/json)
    + Attributes (UserPredefinedModel)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 401 (application/json)
    Return when token is invalid

    + Attributes (DefaultError401)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Google Login [POST /auth/google]

1. Authenticate a user with client generated token key (shared secret) and user Google credentials to the DB. First generate the token using shared secret by :  

        md5(strrev(sharedSecret + userId) + gEmail + date)

2. Match the babeToken in HTTP param, if unmatch then return HTTP 401.

3. First find `:CommonUser` or `:GoogleUser` in DB by querying using these precedence: 

        gpEmail > gpId > uid > advId > idfa > gcmId

4. If the user is found, then update:
    + *:CommonUser.name*
    + *:CommonUser.token*
    + *:CommonUser.userAvatar (opt)*
    + *:CommonUser.updated*
    + *:AUTH_BY.lastLogin*
    + *:GoogleUser.email*
    + *:GoogleUser.gId*
    + *:GoogleUser.gToken*

5. If the user is not found then create new `:CommonUser` with relationship to new `:GoogleUser` and also relationship to either `:AndroidUser`, `:IOSUser` or `:WebUser` based on the HTTP param which is present (advId, idfa, gcmId).

6. Either way, put these key-value into redis *(Cache per dimension)* *see below:

7. Check whether the connected `AndroidUser` has any `IS_A` relationship to another `CommonUser`, If it has, then switch `IS_A` relationship to this `CommonUser`. Otherwise create `IS_A` relationship to `AndroidUser` and each `AndroidUser` can only has **1** at the same time.

8. Check whether the connected `IOSUser` has any `IS_A` relationship to another `CommonUser`, If it has, then switch `IS_A` relationship to this `CommonUser`. Otherwise create `IS_A` relationship to `IOSUser` and each `IOSUser` can only has **1** at the same time.

9. Check whether the connected `WebUser` has any `IS_A` relationship to another `CommonUser`, If it has, then switch `IS_A` relationship to this `CommonUser`. Otherwise create `IS_A` relationship to `WebUser` and each `WebUser` can only has **1** at the same time.

10. Return the predefined user model as response.

#### Redis Key To Be Defined on Point 6

| Redis Key                            | TTL    | Desc                                         |
|--------------------------------------|--------|----------------------------------------------|
| `x-token:{token}`                    | 30 day | Alias to user id                             |
| `x-dimens-basic-id:{uid}`            | 30 day | JSON Formatted Basic User Object             |
| `x-dimens-full-id:{uid}`             | 30 day | JSON Formatted Full User Object              |
| `x-dimens-ios-id:{uid}`              | 30 day | JSON Formatted iOS User Object               |
| `x-dimens-droid-id:{uid}`            | 30 day | JSON Formatted Android User Object           |
| `x-dimens-web-id:{uid}`              | 30 day | JSON Formatted Web User Object               |
| `x-dimens-fb-id:{uid}`               | 30 day | JSON Formatted FB User Object                |
| `x-dimens-gp-id:{uid}`               | 30 day | JSON Formatted Google User Object            |
| `x-dimens-basicdemographic-id:{uid}` | 30 day | JSON Formatted User Basic Demographic Object |
| `x-dimens-location-id:{uid}`         | 30 day | JSON Formatted User Location Object          |
| `x-dimens-interests-id:{uid}`        | 30 day | JSON Formatted User's Interest Object        |
| `x-dimens-occupation-id:{uid}`       | 30 day | JSON Formatted User's Occupation Object      |
| `x-dimens-education-id:{uid}`        | 30 day | JSON Formatted User's Education Object       |

+ Request (application/json)
    + Attributes (GoogleAuthRequest)

+ Response 200 (application/json)
    + Attributes (UserPredefinedModel)
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 401 (application/json)
    Return when token is invalid

    + Attributes (DefaultError401)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

# Group Resource User

## Single User Operation [/{uid}]

### Get User Shared Model [POST]

Get the user shared model by looking from uid supplied. 

Use this precedence to look user for: 
```
redis > DB
```
If user is not found then return HTTP 404. Otherwise return the shared model. 

Optionally, other user property can be supplied to add the desired fields other than the standard shared model using dimension data param.

Refer to table below of supported user's dimension

| Dimension            | Append Type     | Properties                        |
|----------------------|-----------------|-----------------------------------|
| **basic**            | Default Object  | uid (String)                      |
|                      |                 | name (String)                     |
|                      |                 | token (String)                    |
|                      |                 | userAvatar (String)               |
|                      |                 | lastSeen (Timestamp)              |
| **full**             | Flatten         | created (Timestamp)               |
|                      |                 | updated (Timestamp)               |
|                      |                 | enabled (Boolean)                 |
|                      |                 | admin (Boolean)                   |
|                      |                 | banned (Boolean)                  |
| **iosuser**          | Array of Object | idfa (String)                     |
|                      |                 | apnsToken (String)                |
|                      |                 | deviceId (String)                 |
| **androiduser**      | Array of Object | advId (String)                    |
|                      |                 | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **webuser**          | Array of Object | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **fbuser**           | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **googleuser**       | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **interest**         | Array of Object | category (String)                 |
|                      |                 | interests (Array of Object)       |
|                      |                 | ˪ name (String)                   |
|                      |                 | ˪ weight (double)                 |
| **basicdemographic** | Flatten         | birthday (Timestamp)              |
|                      |                 | ageGroup (String) = "*min - ?max" |
|                      |                 | gender (String)                   |
|                      |                 | religion (String)                 |
|                      |                 | politic (String)                  |
| **education**        | Flatten         | school (String)                   |
|                      |                 | fieldOfStudy (String)             |
|                      |                 | schoolType (String)               |
| **occupation**       | Flatten         | employer (String)                 |
|                      |                 | workPosition (String)             |
|                      |                 | workLocation (String)             |
| **location**         | Flatten         | hometown (String)                 |
|                      |                 | country (String)                  |
|                      |                 | city (String)                     |

+ Parameters
    + uid: 123 (number) - User ID
    
+ Request (application/json)
    + Attributes
        + dimension: basic (array[string], optional)
                
            The User's Dimension, value should be one or more dimension defined below:
            - basic - Default, always implicitly included
            - full - Extended user's information
            - iosuser
            - androiduser
            - webuser
            - fbuser
            - googleuser
            - interest
            - basicdemographic
            - education
            - occupation
            - location

+ Response 200 (application/json)    
    + Attributes (BasicPlusUserModel)
    
+ Request (application/json) 
    Dimension is `full`
    + Attributes
        + dimension: full

+ Response 200 (application/json)
    + Attributes (ExtendedUserModel)
    
+ Request (application/json)
    Dimension is `fbuser`
    + Attributes
        + dimension: fbuser
        
+ Response 200 (application/json)
    + Attributes (UserPlusAndFBModel)

+ Request (application/json) 
    Dimension is `interest`
    + Attributes
        + dimension: interest
        
+ Response 200 (application/json)
    + Attributes (UserPlusAndInterestModel)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Update Basic User Information [PATCH]

Update user’s basic profile based on the data param key-value property mapping.

If a single property not found in the mapping, then the request will be omitted. 

Otherwise return HTTP 204 with no content upon success.

+ Parameters
    + uid: 123 (number, required) - User ID
    
+ Request (application/json)
    + Attributes (BasicUserUpdateRequest)
        
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Get Predefined User Model [GET /pre/{uid}]

Get the predefined user model by looking from uid supplied. 

Use this precedence to look user for: 
```
redis > DB
```
If user is not found then return HTTP 404. Otherwise return the predefined model. 

+ Parameters
    + uid: 123 (number) - User ID

+ Response 200 (application/json)    
    + Attributes (ExtendedUserModel)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Get User Shared Model by Babe Token [POST /bytoken/{babeToken}]

Get the user shared model by looking from babe token supplied.

Use this precedence to look user for: 
```
redis > DB
```
If user is not found then return HTTP 404. Otherwise return the shared model. 

Optionally, other user property can be supplied to add the desired fields other than the standard shared model using dimension data param.

Refer to table below of supported user's dimension

| Dimension            | Append Type     | Properties                        |
|----------------------|-----------------|-----------------------------------|
| **basic**            | Default Object  | uid (String)                      |
|                      |                 | name (String)                     |
|                      |                 | token (String)                    |
|                      |                 | userAvatar (String)               |
|                      |                 | lastSeen (Timestamp)              |
| **full**             | Flatten         | created (Timestamp)               |
|                      |                 | updated (Timestamp)               |
|                      |                 | enabled (Boolean)                 |
|                      |                 | admin (Boolean)                   |
|                      |                 | banned (Boolean)                  |
| **iosuser**          | Array of Object | idfa (String)                     |
|                      |                 | apnsToken (String)                |
|                      |                 | deviceId (String)                 |
| **androiduser**      | Array of Object | advId (String)                    |
|                      |                 | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **webuser**          | Array of Object | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **fbuser**           | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **googleuser**       | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **interest**         | Array of Object | category (String)                 |
|                      |                 | interests (Array of Object)       |
|                      |                 | ˪ name (String)                   |
|                      |                 | ˪ weight (double)                 |
| **basicdemographic** | Flatten         | birthday (Timestamp)              |
|                      |                 | ageGroup (String) = "*min - ?max" |
|                      |                 | gender (String)                   |
|                      |                 | religion (String)                 |
|                      |                 | politic (String)                  |
| **education**        | Flatten         | school (String)                   |
|                      |                 | fieldOfStudy (String)             |
|                      |                 | schoolType (String)               |
| **occupation**       | Flatten         | employer (String)                 |
|                      |                 | workPosition (String)             |
|                      |                 | workLocation (String)             |
| **location**         | Flatten         | hometown (String)                 |
|                      |                 | country (String)                  |
|                      |                 | city (String)                     |

+ Parameters
    + babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string) - Babe Generated Token
    
+ Request (application/json)
    + Attributes
        + dimension: basic (array[string], optional)
                
            The User's Dimension, value should be one or more dimension defined below:
            - basic - Default, always implicitly included
            - full - Extended user's information
            - iosuser
            - androiduser
            - webuser
            - fbuser
            - googleuser
            - interest
            - interestcategory
            - basicdemographic
            - education
            - occupation
            - location

+ Response 200 (application/json)    
    + Attributes (BasicPlusUserModel)
    
+ Request (application/json)
    Dimension is `full`
    + Attributes
        + dimension: full

+ Response 200 (application/json)
    + Attributes (ExtendedUserModel)
    
+ Request (application/json)
    Dimension is `fbuser`
    + Attributes
        + dimension: fbuser
        
+ Response 200 (application/json)
    + Attributes (UserPlusAndFBModel)

+ Request (application/json)
    Dimension is `interest`
    + Attributes
        + dimension: interest
        
+ Response 200 (application/json)
    + Attributes (UserPlusAndInterestModel)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when token is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Get Predefined User Model by Babe Token [GET /pre/bytoken/{babeToken}]

Get the predefined user model by looking from babe token supplied. 

Use this precedence to look user for: 
```
redis > DB
```
If user is not found then return HTTP 404. Otherwise return the predefined model. 

+ Parameters
    + babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string) - Babe Generated Token

+ Response 200 (application/json)    
    + Attributes (ExtendedUserModel)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when token is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Multiple User Retrieval [/mget/]

### Multi Get User Shared Model [POST]

Get an array of user shared model by looking from array of uid supplied. 

Use this precedence to look user for: 
```
redis > DB
```
If no user found at all then return HTTP 404. Otherwise return partial or full user shared model. 
Optionally, other user property can be supplied to add the desired fields other than the standard shared model using dimension data param.

Refer to table below of supported user's dimension

| Dimension            | Append Type     | Properties                        |
|----------------------|-----------------|-----------------------------------|
| **basic**            | Default Object  | uid (String)                      |
|                      |                 | name (String)                     |
|                      |                 | token (String)                    |
|                      |                 | userAvatar (String)               |
|                      |                 | lastSeen (Timestamp)              |
| **full**             | Flatten         | created (Timestamp)               |
|                      |                 | updated (Timestamp)               |
|                      |                 | enabled (Boolean)                 |
|                      |                 | admin (Boolean)                   |
|                      |                 | banned (Boolean)                  |
| **iosuser**          | Array of Object | idfa (String)                     |
|                      |                 | apnsToken (String)                |
|                      |                 | deviceId (String)                 |
| **androiduser**      | Array of Object | advId (String)                    |
|                      |                 | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **webuser**          | Array of Object | gcmId (String)                    |
|                      |                 | deviceId (String)                 |
| **fbuser**           | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **googleuser**       | Single Object   | email (String)                    |
|                      |                 | id (String)                       |
|                      |                 | token (String)                    |
|                      |                 | lastLogin (Timestamp)             |
| **interest**         | Array of Object | category (String)                 |
|                      |                 | interests (Array of Object)       |
|                      |                 | ˪ name (String)                   |
|                      |                 | ˪ weight (double)                 |
| **basicdemographic** | Flatten         | birthday (Timestamp)              |
|                      |                 | ageGroup (String) = "*min - ?max" |
|                      |                 | gender (String)                   |
|                      |                 | religion (String)                 |
|                      |                 | politic (String)                  |
| **education**        | Flatten         | school (String)                   |
|                      |                 | fieldOfStudy (String)             |
|                      |                 | schoolType (String)               |
| **occupation**       | Flatten         | employer (String)                 |
|                      |                 | workPosition (String)             |
|                      |                 | workLocation (String)             |
| **location**         | Flatten         | hometown (String)                 |
|                      |                 | country (String)                  |
|                      |                 | city (String)                     |
    
+ Request (application/json)
    + Attributes
        + uids: 123, 567, 999 (array[number], required) - User Indices
        + dimension: basic (array[string], optional)
        
            The User's Dimension, value should be one or more dimension defined below:
            - basic - Default, always implicitly included
            - full - Extended user's information
            - iosuser
            - androiduser
            - webuser
            - fbuser
            - googleuser
            - interest
            - interestcategory
            - basicdemographic
            - education
            - occupation
            - location

+ Response 200 (application/json)    
    + Attributes (array[BasicPlusUserModel])
    
+ Request (application/json)
    Dimension is `full`
    + Attributes
        + dimension: full

+ Response 200 (application/json)
    + Attributes (array[ExtendedUserModel])
    
+ Request (application/json)
    Dimension is `fbuser`
    + Attributes
        + dimension: fbuser
        
+ Response 200 (application/json)
    + Attributes (array[UserPlusAndFBModel])

+ Request (application/json)
    Dimension is `interest`
    + Attributes
        + dimension: interest
        
+ Response 200 (application/json)
    + Attributes (array[UserPlusAndInterestModel])

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when NO user id is found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Multi Get Predefined User Model [POST /mget/pre]

Get an array of predefined user model by looking from array of uid supplied. 

Use this precedence to look user for: 
```
redis > DB
```
If no user found at all then return HTTP 404. Otherwise return partial or full user shared model. 

+ Request (application/json)
    + Attributes
        + uids: 123, 567, 999 (array[number], required) - User Indices

+ Response 200 (application/json)    
    + Attributes (array[UserPredefinedModel])

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when NO user id is found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Multi Get User "Has Social Media Login" Status [POST /mget/socstatus]

Get an array of status for each `uid` given in the request `array` of whether `uid` is connected to **ANY** social media at all (FB or Google). 

If it is found then return **1**, otherwise returns **0**.

If `uid` is not found in database, returns **-1**

**IMPORTANT** if, size of requested ids is bigger than 10000 then return HTTP 400 Bad Request.

+ Request (application/json)
    + Attributes
        + uids: 123, 567, 999 (array[number], required) - User Indices

+ Response 200 (application/json)    
    + Attributes
        + status: 1, 1, 0 (array[number]) - User Status Flag

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## GCM ID Related [/gcmid/lim/{limit}]

### Get Active GCM Indices [GET]

Get an array of all active GCM indices from the beginning of the RID (Record ID) and `limit` the number of record by limit.  

Pagination in orientDB is described [here](http://orientdb.com/docs/2.2/Pagination.html).

+ Parameters
    + limit: 1000 (number, required) - Limit of the number of GCM indices that will be returned

+ Response 200 (application/json)
    + Attributes
        + page (object)
            + nextLastId: `1:2001` (string, optional) - The next last ID should be used to request **next** page, can be `null` if there's no more GCM Indices
            + count: 1000 (number) - number of GCM indices that actually returned
        + data: `bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1`, `k98RNwTe3H0:CK2k_MNwgIpoDKCIZvvDMExUdFQLG1` (array[string]) - Array of GCM Indices

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Get Active GCM Indices with Pagination [GET /gcmid/lim/{limit}/from/{lastId}]

Get an array of all active GCM indices from the `lastId` of the RID (Record ID) and `limit` the number of record by limit. 

Pagination in orientDB is described [here](http://orientdb.com/docs/2.2/Pagination.html).

+ Parameters
    + limit: 1000 (number, required) - Limit of the number of GCM indices that will be returned
    + lastId: `1:1001` (string, required) - Last GCM ID identifier in the backend storage used as offset

+ Response 200 (application/json)
    + Attributes (GCMPaginationModel)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### GCM Indices From User Indices [POST /gcmid/find]

Get all GCM Indices from all user indices to be retrieved.

If `userid` has more than 1 GCM ID, then return only the GCM ID linked to `AndroidUser` which has `IS_A` relationship.

If `userid` has no GCM ID linked to it, then include `userid` in the return payload but with `null` on `gcmids` field.

**IMPORTANT** if, size of requested ids is bigger than 1000 then return HTTP 400 Bad Request.

+ Request (application/json)
    + Attributes
        + uids : 123, 456, 789 (array[number]) - Array of User Indices which GCM Indices will be retrieved

+ Response 200 (application/json)
    + Attributes (array[UserToGCMModel])

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Update GCM ID [PATCH /gcmid/{uid}]

Update user’s `:AndroidUser` GCM ID by `advId` supplied.

If specified user doesn’t have `:AndroidUser` with corresponding `advId`, check whether user has **exactly 1** `:AndroidUser` then update it.

Otherwise check every `:AndroidUser`, if supplied `gcmId` is not found,
then create new `:AndroidUser` which storing the new `gcmId`. 
Both case return HTTP 204.

+ Parameters
    + uid: 123 (number, required) - User ID
    
+ Request (application/json)
    + Attributes (BasicAndroidModel)
        
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when NO user id is found
    
    + Attributes (DefaultError404)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Replace GCM ID [PUT /gcmid]

Replace user’s `:AndroidUser` GCM ID with the new one.

Return HTTP 204 with no content upon success.

+ Request (application/json)
    + Attributes
        + oldGcmId: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1 (string, required) - Old Android Google Cloud Messaging ID
        + newGcmId: ncrRNwTe3H0_0F82GHHwgIpoDKCIZvvDMExUdFPL1T (string, required) - New Android Google Cloud Messaging ID
        
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when the old GCM ID is not found
    
    + Attributes (DefaultError404)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Delete GCM ID [DELETE /gcmid]

Delete GCM ID with in random `:AndroidUser` node.

Please NOTE this will only remove `gcmId` properties, and will only remove `:AndroidUser` node if there is no more property defined.

Return HTTP 204 with no content upon success.

+ Request (application/json)
    + Attributes
        + gcmId: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1 (string, required) - Android Google Cloud Messaging ID
        
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when GCM ID is not found
    
    + Attributes (DefaultError404)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Delete Bulk GCM Indices [DELETE /gcmid/bulk]

Delete GCM Indices with in random `:AndroidUser` node.

Please NOTE this will only remove `gcmId` properties, and will only remove `:AndroidUser` node if there is no more property defined.

Return HTTP 204 with no content upon success.

+ Request (application/json)
    + Attributes
        + gcmIds: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1, ncrRNwTe3H0_0F82GHHwgIpoDKCIZvvDMExUdFPL1T (array[string], required) - Android Google Cloud Messaging Indices
        
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
## APNS Related [/apns/{uid}]
    
### Update APNS Token [PATCH]

Update user’s `:IOSUser` APNS Token by `idfa` supplied.

If specified user doesn’t have `:IOSUser` with corresponding `idfa`, check whether user has **exactly 1** `:IOSUser` then update it.

Otherwise check every `:IOSUser`, if supplied `apnsToken` is not found,
then create new `:IOSUser` which storing the new `apnsToken`. 



+ Parameters
    + uid: 123 (number, required) - User ID
    
+ Request (application/json)
    + Attributes (BasicIOSModel)
        
+ Response 204

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when NO user id or idfa is found
    
    + Attributes (DefaultError404)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    

## User Prefered Categories [/cat/{uid}/{icu}] 

### Get User Categories by ICU [GET]

Get the user’s prefered categories by ICU.
 
+ Parameters
    + uid: 123 (number, required) - User ID
    + icu: `id-id` (string, required) - locale ID

+ Response 200 (application/json)
    + Attributes (array[number])

    + Body
            
            [1, 2, 5, 7, 15]

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when user id or ICU is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Update User Categories by ICU [PUT]

Update user’s category list, by removing all old relationships and add all new categories based on icu, eg: “id-id” will only affect all relationship to category which icu is “id-id”.
 
+ Parameters
    + uid: 123 (number, required) - User ID
    + icu: `id-id` (string, required) - locale ID

+ Request (application/json)
    + Attributes
        + categories: 1, 3, 5, 12 (array[number]) - Categories Indices

+ Response 204 (application/json)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when user id or ICU is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Banned Status [/ban/{uid}]

### Check User's Banned Status [GET]

Get boolean indicating a certain user id is banned or not.

+ Parameters
    + uid: 123 (number, required) - User ID
    
+ Response 200 (application/json)
    + Attributes (object)
        + uid: 123 (number) - User ID
        + banned: true (boolean) - Banned Status
    
+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Ban [PUT]

Ban specific user id.

+ Parameters
    + uid: 123 (number, required) - Babe User ID.
    
+ Response 204
    
+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
## Unban [DELETE]

Unban specific user id.

+ Parameters
    + uid: 123 (number, required) - Babe User ID.
    
+ Response 204
    
+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## User Interests [/interest/{uid}]

### Update User Interest [PUT]

Update user’s interest list along with interest category for each of interest, by removing all old relationships and add all new interests.

+ Parameters
    + uid: 123 (number, required) - User ID

+ Request (application/json)
    + Attributes (array[UserInterestRequest])

+ Response 204 (application/json)

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 404 (application/json)
    Return when user id or ICU is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Basic Demographic [/demographic]

### Update Birthday [PUT /demographic/birthday]

Update user’s birthday.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + birthday: 567993600 (number, required) - User's birthday
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Update Age Group [PUT /demographic/agegroup]

Update user’s age group by giving min age group & max age group.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + min: 18 (number, required) - Min Age Range
        + max: 24 (number) - Max Age Range
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Update Gender [PUT /demographic/gender]

Update user’s gender.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + gender: `male` (enum[string], required) - User's gender
            + Members
                + `male`
                + `female`
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
### Update Occupation [PUT /demographic/occ]

Update user’s occupation detail.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + employer: PT Angin Ribut (string, optional) - Name of the employer
        + position: General Manager (string, optional) - Name of the jop position
        + location: Jakarta (string, optional) - Location name
       
+ Response 204

+ Response 400 (application/json)
    Return when no optional attributes found at all OR requirement not met correctly
    
    + Attributes (DefaultError400)

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
## Update Education [PUT /demographic/edu]

Update user’s education detail.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + school: ITB (string, optional) - School Name.
        + fieldOfStudy: Computer Science (string, optional) - Field of Study.
        + type: University (string, optional) - School Type.
       
+ Response 204

+ Response 400 (application/json)
    Return when no optional attributes found at all OR requirement not met correctly
    
    + Attributes (DefaultError400)

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
## Update Political View [PUT /demographic/politic]

Update user’s political view.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + politicEdi: University (string, required) - Political view.
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
    
## Update Religion [PUT /demographic/religion]

Update user’s religion.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + religion: University (string, required) - Religion.
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)  
    
## Update City [PUT /demographic/loc/city]

Update user’s city location.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + city: Tangerang (string, required) - City name.
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

## Update Country [PUT /demographic/loc/country]

Update user’s country location.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + country: Indonesia (string, required) - Country name.
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)
     
## Update Hometown [PUT /demographic/loc/hometown]

Update user’s hometown location.

+ Request (application/json)
    + Attributes
        + uid: 123 (number, required) - Babe User ID.
        + hometown: Bandung (string, required) - Hometown name.
       
+ Response 204

+ Response 404 (application/json)
    Return when user id is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

# Group Admin Control

## Cache Management [/start]

### Start-Up [POST]

This endpoint basically will create / update `my-new-user-id` key on Redis by 2 ways:
* Use `forceId` field if exists in the request body.
* Calculate maximum `userid` in the backend database then update `my-new-user-id` by `max + 1`.


+ Request (application/json)
    + Attributes
        + forceId: 5000000 (number, optional) - number of the autogenerated ID to be set on startup.

+ Response 204
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Prewarm Cache [POST /cache/prewarm]

Pre-warm the redis cache by populating all relevant redis key from certain user range (`startId` to `endId`) to accommodate fast checking on login & get process. 

TTL for every populated keys are the same as when the key is populated on-the-fly as the request need it. 

The process should be done asynchronously using Akka actor and the request should return as soon as possible. 

The returned status should reflect the status of Akka process. 

If request to prewarm cache is received before the previous process finished, then just return the status of current Akka process.

Return HTTP 200 with status of the pre-warm process upon success. It should contains current processing count vs total & the requested start ID and end ID. 

See success response example, it’s already in the same order as mentioned above.

+ Request (application/json)
    + Attributes
        + startId: 1 (number, required) - The starting user ID to be cached
        + endId: 500000 (number, required) - The ending user ID to be cached

+ Response 200 (application/json)
    + Attributes
        + status: `Running 1/1000 (0-1000)` (string) - Status of the process
        
+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)

+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)







# Data Structures

## DeviceLoginResponse (object)
+ uid: 123 (number) - Babe User ID

## BasicUserModel (object)
+ uid: 123 (number) - Babe User ID.
+ name: Angga Muhammad (string) - Name
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string) - BABE Generated Token
+ userAvatar: http://cdn.babe.news/images/123.jpg (string) - User Avatar Image URL

## BasicPlusUserModel (BasicUserModel)
+ lastSeen: 1465631405 (number) - Last seen in Babe (timestamp)

## ExtendedUserModel (BasicPlusUserModel)
+ enabled: true (boolean) - Toggle whether user is active or not
+ admin: false (boolean) - Toggle whether user has admin privilege or not
+ banned: false (boolean) - Toggle whether user is banned or not
+ created: 1465631405 (number) - When the user created in the system (timestamp)
+ updated: 1465631405 (number) - When the user record is updated (timestamp)

## ExtendedPlusBirthdayUserModel (ExtendedUserModel)
+ birthday: 567993600 (number) - User's birthday

## BasicUserUpdateRequest (object)
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string) - BABE Generated Token
+ userAvatar: http://cdn.babe.news/images/123.jpg (string) - User Avatar Image URL
+ lastSeen: 1465631405 (number) - Last seen in Babe (timestamp)
+ enabled: true (boolean) - Toggle whether user is active or not
+ fbToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string) - Facebook Token
+ fbEmail: amura@abc.com (string) - FB Email
+ gpToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIikiYWRtaW4iOnRydWV9 (string) - Google Plus Token
+ gpEmail: amura@gmail.com (string) - Google Plus Email

## BasicAndroidModel (object)
+ advId: 2261ae9f81b (string) - Google Advertiser ID
+ gcmId: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1 (string) - Android Google Cloud Messaging ID

## BasicIOSModel (object)
+ idfa: adwad2214bf (string) - Apple's Identification for Advertiser
+ apnsToken: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1 (string) - Apple Push Notification Service Token

## BasicFBModel (object)
+ fbId: KKD22da111da34 (string) - Facebook User ID
+ fbToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string) - Facebook Token
+ fbEmail: amura@abc.com (string) - FB Email

## SharedFBModel (object)
+ id: KKD22da111da34 (string) - Facebook User ID
+ token: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string) - Facebook Token
+ email: amura@abc.com (string) - FB Email
+ lastLogin: 1465631405 (number) - Timestamp of last login

## BasicGPlusModel (object)
+ gpId: FBA22da111da3A (string) - Google Plus User ID
+ gpToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIikiYWRtaW4iOnRydWV9 (string) - Google Plus Token
+ gpEmail: amura@gmail.com (string) - Google Plus Email

## FBAuthRequest (BasicUserModel)
+ uid: 123 (string, required) - Babe User ID.
+ name: Angga Muhammad (string, required) - Name
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string, required) - BABE Generated Token
+ date: `2016-08-31 12:00:01` (string, required) - Date formatted as (YYYY-MM-dd HH:mm:ss)
+ Include BasicFBModel
+ fbId: KKD22da111da34 (string, required) - Facebook User ID
+ fbToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 (string, required) - Facebook Token
+ Include BasicAndroidModel
+ Include BasicIOSModel

## GoogleAuthRequest (BasicUserModel)
+ uid: 123 (string, required) - Babe User ID.
+ name: Angga Muhammad (string, required) - Name
+ babeToken: TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ (string, required) - BABE Generated Token
+ date: `2016-08-31 12:00:01` (string, required) - Date formatted as (YYYY-MM-dd HH:mm:ss)
+ Include BasicGPlusModel
+ gpId: FBA22da111da3A (string, required) - Google Plus User ID
+ gpToken: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIikiYWRtaW4iOnRydWV9 (string, required) - Google Plus Token
+ gpEmail: amura@gmail.com (string, required) - Google Plus Email
+ Include BasicAndroidModel
+ Include BasicIOSModel

## GCMPaginationModel (object)
+ page (object)
    + nextLastId: `1:2001` (string, optional) - The next last ID should be used to request **next** page, can be `null` if there's no more GCM Indices
    + count: 1000 (number) - number of GCM indices that actually returned
+ data: `bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1`, `k98RNwTe3H0:CK2k_MNwgIpoDKCIZvvDMExUdFQLG1` (array[string]) - Array of GCM Indices

## UserToGCMModel (object)
+ uid: 123 (number) - User ID
+ gcmid: `bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1` (string) - GCM ID

## UserPredefinedModel (ExtendedPlusBirthdayUserModel)
+ categories: [1, 3, 9, 21, 55] (array[number]) - User category preference 
+ Include BasicFBModel
+ Include BasicGPlusModel

## UserInterestRequest (object)
+ category: Music (string, required)
+ interests (array[UserInterestModel])

## UserInterestModel (object)
+ name: `Katty Perry` (string, required) - Name of interest
+ weight: `1.0` (number, optional) - Weight of interest

## UserInterestCategoryModel (object)
+ category: `Music` (string, required) - Name of the interest category
+ interests (UserInterestModel)

## UserPlusAndFBModel (BasicPlusUserModel)
+ fbUser (SharedFBModel)

## UserPlusAndInterestModel (BasicPlusUserModel)
+ interest (array[UserInterestCategoryModel])

## Error (object)
+ errCode (number) - Error Code
+ errMsg (string) - Error Message

## DefaultError400 (Error)
+ errCode: `-1`
+ errMsg: Invalid Request

## DefaultError401 (Error)
+ errCode: `-2`
+ errMsg: Authorization needed to access resource

## DefaultError404 (Error)
+ errCode: `-5`
+ errMsg: Resource not found

## DefaultError503 (Error)
+ errCode: `-10`
+ errMsg: Backend service is down